def bubblesort(list):
    for i in range(len(list)-1,0,-1):
        for j in range(i):
            if list[j]>list[j+1]:
                temp=list[j]
                list[j]=list[j+1]
                list[j+1]=temp
list=[4,4,5,1]
bubblesort(list)
print(list)



Let's go through the code and track the values of i and j in each iteration of the loops for the list [4, 4, 5, 1]:

The outer loop iterates with i starting from len(list)-1 (which is 3) down to 1.

The inner loop iterates over j, which runs from 0 to i-1. Let's break this down:

Initial List: [4, 4, 5, 1]
1st Pass (Outer loop: i = 3):
Inner loop runs with j from 0 to 2 (i-1):
j = 0: Compare list[0] (4) and list[1] (4) → No swap (since 4 is not greater than 4)
j = 1: Compare list[1] (4) and list[2] (5) → No swap (since 4 is not greater than 5)
j = 2: Compare list[2] (5) and list[3] (1) → Swap (since 5 is greater than 1)
After swap: List becomes [4, 4, 1, 5]
2nd Pass (Outer loop: i = 2):
Inner loop runs with j from 0 to 1 (i-1):
j = 0: Compare list[0] (4) and list[1] (4) → No swap
j = 1: Compare list[1] (4) and list[2] (1) → Swap (since 4 is greater than 1)
After swap: List becomes [4, 1, 4, 5]
3rd Pass (Outer loop: i = 1):
Inner loop runs with j = 0:
j = 0: Compare list[0] (4) and list[1] (1) → Swap (since 4 is greater than 1)
After swap: List becomes [1, 4, 4, 5]
Final List: [1, 4, 4, 5]
Values of i and j in each iteration:
Pass	i (Outer Loop)	j (Inner Loop)	Action
1	    3	            0	            No swap (4 ≤ 4)
1	    3	            1	            No swap (4 ≤ 5)
1	    3	            2	            Swap (5 > 1), list = [4, 4, 1, 5]
2	    2	            0	            No swap (4 ≤ 4)
2	    2	            1	            Swap (4 > 1), list = [4, 1, 4, 5]
3	    1	            0	            Swap (4 > 1), list = [1, 4, 4, 5]
This process sorts the list in ascending order step by step!
